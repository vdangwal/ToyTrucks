# docker build -t temp_catalog_api -f services/catalog/catalog.api/Dockerfile .  THis creates an image from the src dir...
version: '3.4'

services:
  catalogdb:
    image: postgres:alpine
    restart: "no"
    environment:
      POSTGRES_USER: "marcus"
      POSTGRES_PASSWORD: "password"
    ports:
      - 5432:5432
    volumes:
      - catalog_postgres_data:/data/catalogdb
    logging:
      driver: none

  orderdb:
    image: mongo
    restart: "no"
    ports:
      - "27017:27017"
    volumes:
      - order_mongo_data:/data/orderdb
    logging:
      # turns off logging
      driver: none

  basketdb:
    image: redis:alpine
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - basket_redis_data:/data/basketdb
    logging:
      driver: none

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    restart: "no"
    environment:
      teds: ""
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    logging:
      driver: none

  catalog_api:
    image: marcusquigley/catalogapi:1.1
    container_name: catalog_api
    build:
      context: Services/Catalog/Catalog.Api
      target: prod
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - 3500:80
    volumes:
      - ./Services/Catalog/Catalog.Api/:/work/
    depends_on:
      - catalogdb

  basket_api:
    image: marcusquigley/basketapi:1.1
    container_name: basket_api
    build:
      context: Services/Basket/Basket.Api
      target: prod
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - 3502:443
    volumes:
      - ./Services/Basket/Basket.Api/:/basketwork/
    depends_on:
      - basketdb #basket_redis_db
      - rabbitmq

  order_api:
    image: marcusquigley/orderapi:1.1
    container_name: order_api
    build:
      context: Services/Orders/Orders.Api
      target: prod
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - 3508:80
    volumes:
      - ./Services/Orders/Orders.Api/:/orderapiwork/
    depends_on:
      #- catalogdb 
      - rabbitmq
      - orderdb

  mvc_frontend:
    image: marcusquigley/mvcfrontend:1.0
    container_name: mvc_frontend
    build:
      context: Frontends/Mvc/Web
      target: prod
    environment:
      #ASPNETCORE_URLS: "https://+;http://+"
      ASPNETCORE_URLS: "http://+"
      #ASPNETCORE_HTTPS_PORT: "8001"
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - "8000:80"
      # - "8001:443"
      # volumes:
      #   - ${APPDATA}\microsoft\UserSecrets\:/root/.microsoft/usersecrets
      #   - ${USERPROFILE}\.aspnet\https:/root/.aspnet/https/
    depends_on:
      - catalog_api
      - order_api
      - basket_api
      - ocelot_api

  ocelot_api:
    image: marcusquigley/apigateway:1.0
    container_name: ocelot_api
    build:
      context: ApiGateways/OcelotApi
      target: prod
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - 8010:80
    depends_on:
      - catalog_api
      - order_api
      - basket_api

  identity_service:
    image: marcusquigley/identityservice:1.0
    container_name: identity_service
    build:
      context: Security/Identity
      target: prod
    environment:
      ASPNETCORE_ENVIRONMENT: Local
    ports:
      - 3520:80

volumes:
  order_mongo_data:
    name: order_mongo_data
  basket_redis_data:
    name: basket_redis_data
  catalog_postgres_data:
    name: catalog_postgres_data
  rabbitmqdata:
    name: rabbitmqdata
